version: '3'

services:
  rabbitmq:
    container_name: rabbitmq-container
    image: rabbitmq:3-management
    ports:
      - "15672:15672"
      - "5672:5672"
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_running"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      - user_postgres
      - product_postgres
      - order_mongodb
      - cart_mongodb


  user_postgres:
    image: postgres
    container_name: user-postgres-container
    environment:
      POSTGRES_DB: ${USER_POSTGRES_DB}
      POSTGRES_USER: ${USER_POSTGRES_USER}
      POSTGRES_PASSWORD: ${USER_POSTGRES_PASSWORD}
    volumes:
      - pg-data:/var/lib/postgresql/user_data
    ports:
      - "5431:5432"

  user_service:
    container_name: user-container
    build:
      context: ..
      dockerfile: src/user/Dockerfile
    environment:
      USER_POSTGRES_HOST: ${USER_POSTGRES_HOST}
      USER_POSTGRES_PORT: ${USER_POSTGRES_PORT}
      USER_POSTGRES_USER: ${USER_POSTGRES_USER}
      USER_POSTGRES_PASSWORD: ${USER_POSTGRES_PASSWORD}
      USER_POSTGRES_DB: ${USER_POSTGRES_DB}
    depends_on:
      rabbitmq:
        condition: service_healthy
    ports:
      - "8000:8000"


  product_postgres:
    image: postgres
    container_name: product-postgres-container
    environment:
      POSTGRES_DB: ${PRODUCT_POSTGRES_DB}
      POSTGRES_USER: ${PRODUCT_POSTGRES_USER}
      POSTGRES_PASSWORD: ${PRODUCT_POSTGRES_PASSWORD}
    volumes:
      - pg-data:/var/lib/postgresql/product_data
    ports:
      - "5432:5432"

  product_service:
    container_name: product-container
    build:
      context: ..
      dockerfile: src/product/Dockerfile
    environment:
      PRODUCT_POSTGRES_HOST: ${PRODUCT_POSTGRES_HOST}
      PRODUCT_POSTGRES_PORT: ${PRODUCT_POSTGRES_PORT}
      PRODUCT_POSTGRES_USER: ${PRODUCT_POSTGRES_USER}
      PRODUCT_POSTGRES_PASSWORD: ${PRODUCT_POSTGRES_PASSWORD}
      PRODUCT_POSTGRES_DB: ${PRODUCT_POSTGRES_DB}
    depends_on:
      rabbitmq:
        condition: service_healthy
    ports:
      - "8001:8000"


  order_mongodb:
    container_name: order-mongodb-container
    image: mongo
    environment:
      - MONGO_INITDB_DATABASE=${ORDER_MONGODB_DB}
      - MONGO_INITDB_ROOT_USERNAME=${ORDER_MONGODB_USER}
      - MONGO_INITDB_ROOT_PASSWORD=${ORDER_MONGODB_PASSWORD}
    volumes:
      - mongo-data:/var/lib/mongodb/order_data
    command:
      mongod --quiet --logpath /dev/null

  order_service:
    container_name: order-container
    build:
      context: ..
      dockerfile: src/order/Dockerfile
    environment:
      ORDER_MONGODB_HOST: ${ORDER_MONGODB_HOST}
      ORDER_MONGODB_USER: ${ORDER_MONGODB_USER}
      ORDER_MONGODB_PASSWORD: ${ORDER_MONGODB_PASSWORD}
      ORDER_MONGODB_DB: ${ORDER_MONGODB_DB}
      CART_SERVICE_NAME: cart_service
    depends_on:
      rabbitmq:
        condition: service_healthy
    ports:
      - "8002:8000"


  cart_mongodb:
    container_name: cart-mongodb-container
    image: mongo
    environment:
      - MONGO_INITDB_DATABASE=${CART_MONGODB_DB}
      - MONGO_INITDB_ROOT_USERNAME=${CART_MONGODB_USER}
      - MONGO_INITDB_ROOT_PASSWORD=${CART_MONGODB_PASSWORD}
    volumes:
      - mongo-data:/var/lib/mongodb/cart_data
    command:
      mongod --quiet --logpath /dev/null

  cart_service:
    container_name: cart-container
    build:
      context: ..
      dockerfile: src/cart/Dockerfile
    environment:
      CART_MONGODB_HOST: ${CART_MONGODB_HOST}
      CART_MONGODB_USER: ${CART_MONGODB_USER}
      CART_MONGODB_PASSWORD: ${CART_MONGODB_PASSWORD}
      CART_MONGODB_DB: ${CART_MONGODB_DB}
    depends_on:
      rabbitmq:
        condition: service_healthy
    ports:
      - "8003:8000"

volumes:
  pg-data:
  mongo-data: